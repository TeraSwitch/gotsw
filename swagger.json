{
  "openapi": "3.0.1",
  "info": {
    "title": "Teraswitch Api",
    "description": "Welcome to the Teraswitch HTTP API documentation. This API \nprovides a powerful and flexible set of endpoints designed \nto help you integrate Teraswitch's services into your \napplications seamlessly. Whether you're retrieving data, \nperforming complex operations, or automating workflows, our \nAPI is here to assist you.\n\n## Overview\n\nThe Teraswitch API follows RESTful principles, ensuring predictable \nand consistent interactions. Each endpoint is well-documented with \ndetailed descriptions, parameter lists, and examples to help you get \nstarted quickly and efficiently.\n\n## Authentication / Authorization\n\nAPI tokens are scoped to a single Teraswitch project. When making a \nrequest, you will only receive resources for the project that the \nAPI key was created from.\n\nAn API token can be generated within the project settings UI via \nthe portal. The token should be included in every request via the \n```Authorization``` header: ```Authorization: Bearer tokenId:secret```\n\n## Paging\n\nREST endpoints support cursor-based pagination. When you send a \nrequest to a REST endpoint that supports cursor-based pagination, \nthe response body returns the first page of results, and a response \nheader returns links to the next page of results.\n\n### Parameters\n\nThe paginated URL can contain the following parameters:\n\n- **skip** - the number of records to skip (default: 0)\n- **limit** - the maximum number of results to show on the page (default: 100)\n\nPaginated requests will contain an ```_metadata``` object that \nlooks like this:\n`````{\"total_count\": 123, \"limit\": 100, \"skip\": 0}`````",
    "version": "v2"
  },
  "paths": {
    "/v2/Instance": {
      "get": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "List Instances",
        "description": "Lists instances in a project.",
        "parameters": [
          {
            "name": "Status",
            "in": "query",
            "description": "Filter for services of a status (Optional) Available values are ```Active```, ```Pending```,\r\n```Suspended```, ```Terminated```",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Region",
            "in": "query",
            "description": "Filter for services in a region (Optional) May be comma separated to include multiple regions.\r\nAvailable values can be retrieved from the Regions endpoint.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tier",
            "in": "query",
            "description": "Filter for services of a certain tier (Optional) May be comma separated to include multiple tiers.\r\nAvailable values can be retrieved from the tiers endpoint.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tag",
            "in": "query",
            "description": "Filter for services with a tag (Optional) May be comma separated to include multiple tags.\r\nAvailable values can be retrieved from the tags endpoint.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The number of services to return (Optional: default 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "The number of services to skip (Optional: default: 0)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProjectId",
            "in": "query",
            "description": "The id of the project to filter services by",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MetalTierType",
            "in": "query",
            "description": "Specifies whether the tier is a Compute or GPU type",
            "schema": {
              "$ref": "#/components/schemas/MetalTierType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceIEnumerableApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "Create Instance",
        "description": "Creates a new instance.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstanceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstanceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstanceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateInstanceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Instance/{id}": {
      "get": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "Get Instance",
        "description": "Gets an instance by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "Terminate Instance",
        "description": "Terminates an instance by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Instance/tiers": {
      "get": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "List Tiers",
        "description": "Lists available tiers for instances.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudTierIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudTierIEnumerableApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudTierIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Instance/{id}/PowerCommand": {
      "post": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "Send Power Command",
        "description": "Sends a power command to an instance by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "command",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/PowerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CloudServiceApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Instance/{instanceId}/networks": {
      "get": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "List Networks",
        "description": "Lists networks for an instance.",
        "parameters": [
          {
            "name": "ProjectId",
            "in": "query",
            "description": "The project id that the instance is under",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "InstanceId",
            "in": "query",
            "description": "The ID for the instance",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "*Optional* - filter to only return that many volume records. Max of 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "*Optional* - filter to skip that many volume records to support paging.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInstanceNetworksResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Instance/{instanceId}/networks/attach": {
      "post": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "Attach Network",
        "description": "Attaches an instance to a network.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachToNetworkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachToNetworkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachToNetworkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachToNetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachToNetworkResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Instance/{instanceId}/networks/detach": {
      "post": {
        "tags": [
          "Cloud Compute"
        ],
        "summary": "Detach network",
        "description": "Detaches an instance from a network.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DetachFromNetworkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachFromNetworkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachFromNetworkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DetachFromNetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachFromNetworkResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Image": {
      "get": {
        "tags": [
          "Image"
        ],
        "summary": "List all images available to the project",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Invoice/{invoiceId}": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "Get Invoice",
        "parameters": [
          {
            "name": "invoiceId",
            "in": "path",
            "description": "The ID of the invoice to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoice found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInvoiceResponse"
                }
              }
            }
          },
          "404": {
            "description": "Invoice not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvoiceNotFound"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Invoice": {
      "get": {
        "tags": [
          "Invoice"
        ],
        "summary": "List Invoices",
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "description": "The number of invoices to skip (for pagination)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The maximum number of invoices to return (for pagination)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invoices found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInvoicesResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal": {
      "get": {
        "tags": [
          "Metal"
        ],
        "summary": "List Metal Services",
        "description": "Lists all metal services in a project.",
        "parameters": [
          {
            "name": "Status",
            "in": "query",
            "description": "Filter for services of a status (Optional) Available values are ```Active```, ```Pending```,\r\n```Suspended```, ```Terminated```",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Region",
            "in": "query",
            "description": "Filter for services in a region (Optional) May be comma separated to include multiple regions.\r\nAvailable values can be retrieved from the Regions endpoint.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tier",
            "in": "query",
            "description": "Filter for services of a certain tier (Optional) May be comma separated to include multiple tiers.\r\nAvailable values can be retrieved from the tiers endpoint.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Tag",
            "in": "query",
            "description": "Filter for services with a tag (Optional) May be comma separated to include multiple tags.\r\nAvailable values can be retrieved from the tags endpoint.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "The number of services to return (Optional: default 100)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "The number of services to skip (Optional: default: 0)",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ProjectId",
            "in": "query",
            "description": "The id of the project to filter services by",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "MetalTierType",
            "in": "query",
            "description": "Specifies whether the tier is a Compute or GPU type",
            "schema": {
              "$ref": "#/components/schemas/MetalTierType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceIEnumerableApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceIEnumerableApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceIEnumerableApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Metal"
        ],
        "summary": "Create Metal Service",
        "description": "Create a new metal service by specifying individual parameters.\r\n             \r\n- ```displayName``` maps to the hostname of a metal service\r\n- ```regionId```  is the location that a metal service will be deployed. You can retrieve available regions by using the ```/region``` endpoint.\r\n- ```tierId``` is the type of server. You can retrieve available tiers by using the tiers method on the metal endpoint\r\n- ```imageId``` is the operating system that will be deployed on the server. You can retrieve available images using the ```/image``` endpoint.\r\n            \r\n## Memory and Disks\r\nTo allow for flexible systems both the ```memoryGb``` and ```disks``` can be specified. For available\r\noptions refer to the ```/Tiers``` endpoint. If an invalid combination is specified the user will receive a\r\n400 response from the server.\r\n\r\n## Partitions and Raid\r\nVia the request object you can specify partitions and raid arrays to be created on the system. Partitions\r\nare created in the order they are received. If a partition size is left blank, the system will assume that\r\nthe remainder of the disk is to be used. Fixed size partitions should be listed first and the last partition\r\nwill be created with the remainder of the disk space. Only one partition is allowed with no size specified.\r\n\r\nA partition object can contain ```raidType```, ```sizeKb```, ```mountpoint```, and ```filesystem```.\r\n\r\nAvailable raidType values: ```None```, ```Raid0```, ```Raid1```\r\nAvailable filesystem values: ```Unformatted```, ```Ext2```, ```Ext4```, ```Fat32```, ```Swap```,\r\n```Ramfs```, ```Tmpfs```.",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBareMetalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBareMetalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBareMetalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBareMetalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/templates": {
      "get": {
        "tags": [
          "Metal"
        ],
        "summary": "List Templates",
        "description": "Lists all metal service templates.",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTemplateIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTemplateIEnumerableApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTemplateIEnumerableApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTemplateIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/tiers": {
      "get": {
        "tags": [
          "Metal"
        ],
        "summary": "List Tiers",
        "description": "Lists all metal service tiers.",
        "parameters": [
          {
            "name": "metalTierType",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/MetalTierType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTierIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTierIEnumerableApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalTierIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/{id}/Reinstall": {
      "post": {
        "tags": [
          "Metal"
        ],
        "summary": "Reinstall Metal Service",
        "description": "Reinstalls a metal service by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the metal service to reinstall",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The model to reinstall a metal service",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ReinstallMetalRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReinstallMetalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ReinstallMetalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ReinstallMetalRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/{id}": {
      "get": {
        "tags": [
          "Metal"
        ],
        "summary": "Get Metal Service",
        "description": "Gets a single metal service by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the metal service to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/{id}/PowerCommand": {
      "post": {
        "tags": [
          "Metal"
        ],
        "summary": "Send Power Command",
        "description": "Sends a power command to a metal service by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the metal service to send the power command to",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "command",
            "in": "query",
            "description": "The power command to send",
            "schema": {
              "$ref": "#/components/schemas/PowerCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalServiceApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/{id}/Logs": {
      "get": {
        "tags": [
          "Metal"
        ],
        "summary": "Get Logs",
        "description": "Get the logs for a metal service by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the metal service to get logs for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogMessageIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogMessageIEnumerableApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogMessageIEnumerableApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LogMessageIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/Availability": {
      "get": {
        "tags": [
          "Metal"
        ],
        "summary": "Get Availability",
        "description": "Get the availability for metal services in a region.",
        "parameters": [
          {
            "name": "Region",
            "in": "query",
            "description": "The region in which we're querying for availability",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ProjectId",
            "in": "query",
            "description": "The id of the project we're querying for",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "MetalTierType",
            "in": "query",
            "description": "Specifies whether you're querying for Compute or GPU metal services",
            "schema": {
              "$ref": "#/components/schemas/MetalTierType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalConfigurationIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalConfigurationIEnumerableApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MetalConfigurationIEnumerableApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Metal/{id}/rename": {
      "post": {
        "tags": [
          "Metal"
        ],
        "summary": "Rename",
        "description": "Renames a metal service by its ID.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the metal service to rename",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The model to rename a metal service",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRenameRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRenameRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRenameRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRenameRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Network/{networkId}": {
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "Get Network",
        "description": "Retrieves a network by its ID",
        "parameters": [
          {
            "name": "networkId",
            "in": "path",
            "description": "The ID of the network to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNetworkResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Network": {
      "delete": {
        "tags": [
          "Network"
        ],
        "summary": "Delete Network",
        "description": "Deletes a network by its ID",
        "parameters": [
          {
            "name": "networkId",
            "in": "query",
            "description": "The ID of the network to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Network"
        ],
        "summary": "Update Network",
        "description": "Updates a network by its ID",
        "parameters": [
          {
            "name": "networkId",
            "in": "query",
            "description": "The ID of the network to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the updated network details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateNetworkResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Network"
        ],
        "summary": "List Networks",
        "description": "Lists networks based on the provided request",
        "parameters": [
          {
            "name": "ProjectId",
            "in": "query",
            "description": "The id for the project that the networks are in",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "RegionId",
            "in": "query",
            "description": "*Optional* - Filter down the networks to a specific region. If more than one region is\r\ndesired, then provide the region ids in the form of a comma separated list. If you\r\nwould like to query across all regions, then leave this field blank.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Limit",
            "in": "query",
            "description": "*Optional* - filter to only return that many volume records. Max of 100.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "*Optional* - filter to skip that many volume records to support paging.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNetworkResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Network"
        ],
        "summary": "Create Network",
        "description": "Creates a new network based on the provided request",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request containing the new network details",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNetworkResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Price/Calculate": {
      "post": {
        "tags": [
          "Price"
        ],
        "summary": "Calculate Price",
        "description": "Calculate the price for a given request.",
        "requestBody": {
          "description": "The request to calculate the price for.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CalculatePriceRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CalculatePriceRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CalculatePriceRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CalculatePriceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CalculatePriceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Search": {
      "get": {
        "tags": [
          "Search"
        ],
        "summary": "Search",
        "description": "Search for services in a project.",
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "The search query.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of services to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "description": "The number of services to take.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/SshKey": {
      "get": {
        "tags": [
          "SshKey"
        ],
        "summary": "List SSH Keys",
        "description": "List all SSH keys assigned to your project",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "SshKey"
        ],
        "summary": "Create SSH Key",
        "requestBody": {
          "description": "The SSH key to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/SshKey"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SshKey"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/SshKey"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/SshKey"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v2/SshKey/{id}": {
      "get": {
        "tags": [
          "SshKey"
        ],
        "summary": "Get SSH Key",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the SSH key to retrieve",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v2/Usage": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "List usages",
        "description": "Lists usages for the specified year and month.",
        "parameters": [
          {
            "name": "year",
            "in": "query",
            "description": "The year to list usages for.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "The month to list usages for.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to list usages for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of usages to skip.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of usages to take.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListUsageResponsePagedTswApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Usage/{serviceId}": {
      "get": {
        "tags": [
          "Usage"
        ],
        "summary": "Get Usage",
        "description": "Gets the usage for the specified service, year, and month.",
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "description": "The service ID to get usage for.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "year",
            "in": "query",
            "description": "The year to get usage for.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "The month to get usage for.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to get usage for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageResponseRowTswApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Volume": {
      "get": {
        "tags": [
          "Volume"
        ],
        "summary": "List Volumes",
        "description": "Lists all volumes in a project. The volumes can be filtered by region, and the list can be paginated.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to list volumes for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "regionId",
            "in": "query",
            "description": "The region ID to list volumes for. If not specified, volumes from all regions will be listed.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of volumes to take. If not specified, all volumes will be listed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of volumes to skip. If not specified, no volumes will be skipped.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVolumesResponseRecordIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVolumesResponseRecordIEnumerableApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Volume"
        ],
        "summary": "Create Volume",
        "description": "Creates a new volume in a project. The volume can be created in a specific region.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to create the volume in.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request to create a volume.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolumeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolumeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolumeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVolumeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVolumeResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVolumeResponseApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Volume"
        ],
        "summary": "Delete Volume",
        "description": "Deletes a volume in a project. The volume must not be attached to any instances.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to delete the volume in.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request to delete a volume.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVolumeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVolumeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVolumeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteVolumeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Volume/list-attachable": {
      "get": {
        "tags": [
          "Volume"
        ],
        "summary": "List Attachable Volumes",
        "description": "Lists all volumes that can be attached to an instance. The volumes can be filtered by region, and the list can be paginated.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to list attachable volumes for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "The instance ID to list attachable volumes for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of volumes to take. If not specified, all volumes will be listed.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "skip",
            "in": "query",
            "description": "The number of volumes to skip. If not specified, no volumes will be skipped.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVolumesResponseRecordIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVolumesResponseRecordIEnumerableApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Volume/list-attached": {
      "get": {
        "tags": [
          "Volume"
        ],
        "summary": "List Attached Volumes",
        "description": "Lists all volumes attached to an instance. The list can be paginated.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to list attached volumes for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "instanceId",
            "in": "query",
            "description": "The instance ID to list attached volumes for.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVolumesResponseRecordIEnumerableApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListVolumesResponseRecordIEnumerableApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Volume/attach": {
      "put": {
        "tags": [
          "Volume"
        ],
        "summary": "Attach volume",
        "description": "Attaches a volume to an instance in a project. The volume and instance must be in the same region.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to attach the volume in.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request to attach a volume.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachVolumeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachVolumeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachVolumeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/AttachVolumeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachVolumeResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachVolumeResponseApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Volume/detach": {
      "put": {
        "tags": [
          "Volume"
        ],
        "summary": "Detach Volume",
        "description": "Detaches a volume from an instance in a project.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/DetachVolumeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachVolumeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/DetachVolumeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/DetachVolumeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachVolumeResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetachVolumeResponseApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v2/Volume/extend": {
      "put": {
        "tags": [
          "Volume"
        ],
        "summary": "Extend volume",
        "description": "Extends a volume. Once a volume is extended, it cannot be shrunk.",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "The project ID to extend the volume in.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "description": "The request to extend a volume.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendVolumeRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendVolumeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendVolumeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ExtendVolumeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendVolumeResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtendVolumeResponseApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "objectType": {
            "type": "string",
            "description": "Object ID prefix",
            "nullable": true,
            "readOnly": true
          },
          "accountName": {
            "type": "string",
            "description": "Name of the account",
            "nullable": true
          },
          "externalIdentifier": {
            "type": "string",
            "description": "Id of the account in the Hostbill System",
            "nullable": true
          },
          "stripeId": {
            "type": "string",
            "description": "The ID for the Stripe customer account",
            "nullable": true
          },
          "accountRole": {
            "$ref": "#/components/schemas/AccountRole"
          },
          "useBilling": {
            "type": "boolean",
            "description": "Flag that denote if account is using TSW billing"
          },
          "accountLocked": {
            "type": "boolean",
            "description": "Flag that denotes if an account is locked or not"
          },
          "validPaymentMethod": {
            "type": "boolean",
            "description": "Flag that denotes if the account has a valid payment method set up"
          },
          "requirePaymentMethodOnAccountForProvisioning": {
            "type": "boolean",
            "description": "Flag that denotes if account needs valid payment set up to provision machine"
          }
        },
        "additionalProperties": false
      },
      "AccountRole": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "format": "int32"
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Base class for all API responses"
      },
      "AttachToNetworkRequest": {
        "type": "object",
        "properties": {
          "networkId": {
            "type": "string",
            "description": "Id of the network to attach to the instance",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details for attaching an instance to a network"
      },
      "AttachToNetworkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response when attaching a network to an instance"
      },
      "AttachVolumeRequest": {
        "required": [
          "mountPoint",
          "regionId",
          "volumeId"
        ],
        "type": "object",
        "properties": {
          "volumeId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the volume to attach"
          },
          "mountPoint": {
            "minLength": 1,
            "type": "string",
            "description": "The location where the volume will be mounted on the instance"
          },
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region of both the volume and the instance"
          },
          "instanceId": {
            "type": "integer",
            "description": "*Optional* - The id of the instance to attach the volume to",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AttachVolumeResponse": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "description": "The id of the region",
            "nullable": true
          },
          "instanceId": {
            "type": "integer",
            "description": "The id of the instance the volume is attached to",
            "format": "int64"
          },
          "mountPoint": {
            "type": "string",
            "description": "The location where the volume is mounted on the instance",
            "nullable": true
          },
          "volumeId": {
            "type": "string",
            "description": "The id of the volume to attach",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to the request to attach a volume to an instance"
      },
      "AttachVolumeResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/AttachVolumeResponse"
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "CalculatePriceRequest": {
        "type": "object",
        "properties": {
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "regionId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "reserved": {
            "type": "boolean"
          },
          "memoryGb": {
            "type": "number",
            "format": "double"
          },
          "networkGbps": {
            "type": "number",
            "format": "double"
          },
          "disks": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CalculatePriceResponse": {
        "type": "object",
        "properties": {
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "regionId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "reserved": {
            "type": "boolean"
          },
          "memory": {
            "$ref": "#/components/schemas/MemoryPriceResponse"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkPriceResponse"
          },
          "drives": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DrivePriceResponse"
            },
            "description": "The price details for the drive configuration",
            "nullable": true
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The total monthly price for the service",
            "format": "double",
            "example": 5
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The total hourly price for the service",
            "format": "double",
            "example": 0.05
          },
          "tierMonthlyPrice": {
            "type": "number",
            "description": "The base monthly price for the tier",
            "format": "double",
            "example": 5
          },
          "tierHourlyPrice": {
            "type": "number",
            "description": "The base hourly price for the tier",
            "format": "double",
            "example": 0.05
          }
        },
        "additionalProperties": false,
        "description": "Provides a breakdown of the pricing for a service"
      },
      "CloudService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "parentServiceId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "regionId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "externalIdentifier": {
            "type": "string",
            "nullable": true
          },
          "billingId": {
            "type": "string",
            "nullable": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "description": "UID for the cost rate for this service as it's stored in the billing system",
            "format": "uuid",
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "metalDevice": {
            "$ref": "#/components/schemas/MetalDevice"
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reservePricing": {
            "type": "boolean",
            "nullable": true
          },
          "objectType": {
            "type": "string",
            "description": "Object type pneumonic",
            "nullable": true,
            "readOnly": true
          },
          "imageId": {
            "type": "string",
            "description": "ID for the OS image used to create",
            "nullable": true
          },
          "powerState": {
            "$ref": "#/components/schemas/PowerState"
          },
          "ipAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IP addresses assigned to the service",
            "nullable": true
          },
          "tier": {
            "$ref": "#/components/schemas/CloudTier"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          }
        },
        "additionalProperties": false,
        "description": "Represents a cloud service, which is a virtual machine."
      },
      "CloudServiceApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/CloudService"
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "CloudServiceIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudService"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "CloudTier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the tier",
            "nullable": true
          },
          "memory": {
            "type": "integer",
            "description": "Amount of memory for the VM",
            "format": "int32"
          },
          "vcpus": {
            "type": "integer",
            "description": "Number of virtual CPUs for the VM",
            "format": "int32"
          },
          "transfer": {
            "type": "integer",
            "format": "int32"
          },
          "hidden": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Tier for a cloud service."
      },
      "CloudTierIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CloudTier"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "CreateBareMetalRequest": {
        "required": [
          "regionId",
          "tierId"
        ],
        "type": "object",
        "properties": {
          "memoryGb": {
            "type": "integer",
            "description": "The amount of memory in GB to be allocated to the service.",
            "format": "int32"
          },
          "disks": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Dictionary of disk names and sizes in GB. If not specified, the default configuration for the metal tier will\r\nbe used.\r\n            \r\nThe key is the disk name and the value is the size in GB.  For example:\r\n\r\n    \"disks\": {\r\n        \"nvme0n1\": \"960g\",\r\n        \"nvme1n1\": \"960g\"\r\n    }",
            "nullable": true
          },
          "partitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Partition"
            },
            "description": "Partitions to be created.  Not specifying this will result in a single root partition being created.\r\n            \r\nExample for specifying partitions:\r\n\r\n    \"partitions\": [\r\n        {\r\n            \"name\": \"nvme0n1-part1\",\r\n            \"device\": \"nvme0n1\",\r\n            \"sizeBytes\": 50000000000\r\n        },\r\n        {\r\n            \"name\": \"nvme0n1-part1\",\r\n            \"device\": \"nvme0n1\",\r\n            \"sizeBytes\": 50000000000\r\n        },\r\n        {\r\n            \"name\": \"nvme1n1-part2\",\r\n            \"device\": \"nvme1n1\"\r\n            // If sizeBytes is not specified for a device, the remainder of the space will be used.\r\n        }\r\n    ]",
            "nullable": true
          },
          "raidArrays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaidArray"
            },
            "description": "Raid arrays to be created. Can reference physical device names or partitions from mediums of the same class.\r\n            \r\nExample of specifying raid arrays:\r\n            \r\n    \"raidArrays\": [\r\n        {\r\n            \"name\": \"md0\",\r\n            \"type\": \"Raid1\",\r\n            \"members\": [\r\n                \"nvme0n1-part1\",\r\n                \"nvme1n1-part1\"\r\n            ],\r\n            \"fileSystem\": \"Ext4\",\r\n            \"mountPoint\": \"/\"\r\n        }\r\n    ]",
            "nullable": true
          },
          "ipxeUrl": {
            "type": "string",
            "description": "If doing an iPXE boot, this is the URL to the script.",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "description": "Template can be specified instead of image, partitions, sshKeyId, and userData.",
            "format": "int64",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The number of services to be created.  By default, one will be created.",
            "format": "int32",
            "nullable": true
          },
          "reservePricing": {
            "type": "boolean",
            "description": "Denotes if the metal service is being reserved for a whole year. If so, it gets the discounted rate"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for the service.",
            "nullable": true
          },
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region this service should be created in (for example: PIT1).  If an invalid region is provided you will receive a 400 Bad Request.  Use the Regions endpoint to retrieve available regions."
          },
          "tierId": {
            "minLength": 1,
            "type": "string",
            "description": "The service tier to be created.  For metal, this is typically the server config.  For example: 7302p would create a Epyc 7302P system. Tier availability can be retrieved using the regions endpoints."
          },
          "imageId": {
            "type": "string",
            "description": "The image to use when creating this service.  Available images can be retrieved via the images endpoint.",
            "nullable": true
          },
          "sshKeyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The SSH key ids to be added to the service.  These keys will be added to the authorized_keys file for the root user.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The password to be set for the root user.  If not provided, a random password will be generated.",
            "nullable": true
          },
          "userData": {
            "type": "string",
            "description": "Additional user data",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateInstanceRequest": {
        "required": [
          "regionId",
          "tierId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name for the service.",
            "nullable": true
          },
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region this service should be created in (for example: PIT1).  If an invalid region is provided you will receive a 400 Bad Request.  Use the Regions endpoint to retrieve available regions."
          },
          "tierId": {
            "minLength": 1,
            "type": "string",
            "description": "The service tier to be created.  For metal, this is typically the server config.  For example: 7302p would create a Epyc 7302P system.  Tier availability can be retrieved using the regions endpoints."
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "imageId": {
            "type": "string",
            "description": "The image to use when creating this service.  Available images can be retrieved via the images endpoint.",
            "nullable": true
          },
          "sshKeyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The SSH key ids to be added to the service.  These keys will be added to the authorized_keys file for the root user.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The password to be set for the root user.  If not provided, a random password will be generated.",
            "nullable": true
          },
          "userData": {
            "type": "string",
            "description": "Additional user data",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sshKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SshKey"
            },
            "nullable": true
          },
          "bootSize": {
            "type": "integer",
            "format": "int32"
          },
          "tierObj": {
            "$ref": "#/components/schemas/CloudTier"
          }
        },
        "additionalProperties": false
      },
      "CreateMetalRequest": {
        "required": [
          "regionId",
          "tierId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name for the service.",
            "nullable": true
          },
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region this service should be created in (for example: PIT1).  If an invalid region is provided you will receive a 400 Bad Request.  Use the Regions endpoint to retrieve available regions."
          },
          "tierId": {
            "minLength": 1,
            "type": "string",
            "description": "The service tier to be created.  For metal, this is typically the server config.  For example: 7302p would create a Epyc 7302P system.  Tier availability can be retrieved using the regions endpoints."
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "imageId": {
            "type": "string",
            "description": "The image to use when creating this service.  Available images can be retrieved via the images endpoint.",
            "nullable": true
          },
          "sshKeyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The SSH key ids to be added to the service.  These keys will be added to the authorized_keys file for the root user.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The password to be set for the root user.  If not provided, a random password will be generated.",
            "nullable": true
          },
          "userData": {
            "type": "string",
            "description": "Additional user data",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sshKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SshKey"
            },
            "nullable": true
          },
          "memoryGb": {
            "type": "integer",
            "description": "The amount of memory in GB to be allocated to the service.",
            "format": "int32"
          },
          "disks": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Dictionary of disk names and sizes in GB. If not specified, the default configuration for the metal tier will\r\nbe used.\r\n            \r\nThe key is the disk name and the value is the size in GB.  For example:\r\n\r\n    \"disks\": {\r\n        \"nvme0n1\": \"960g\",\r\n        \"nvme1n1\": \"960g\"\r\n    }",
            "nullable": true
          },
          "partitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Partition"
            },
            "description": "Partitions to be created.  Not specifying this will result in a single root partition being created.\r\n            \r\nExample for specifying partitions:\r\n\r\n    \"partitions\": [\r\n        {\r\n            \"name\": \"nvme0n1-part1\",\r\n            \"device\": \"nvme0n1\",\r\n            \"sizeBytes\": 50000000000\r\n        },\r\n        {\r\n            \"name\": \"nvme0n1-part1\",\r\n            \"device\": \"nvme0n1\",\r\n            \"sizeBytes\": 50000000000\r\n        },\r\n        {\r\n            \"name\": \"nvme1n1-part2\",\r\n            \"device\": \"nvme1n1\"\r\n            // If sizeBytes is not specified for a device, the remainder of the space will be used.\r\n        }\r\n    ]",
            "nullable": true
          },
          "raidArrays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaidArray"
            },
            "description": "Raid arrays to be created. Can reference physical device names or partitions from mediums of the same class.\r\n            \r\nExample of specifying raid arrays:\r\n            \r\n    \"raidArrays\": [\r\n        {\r\n            \"name\": \"md0\",\r\n            \"type\": \"Raid1\",\r\n            \"members\": [\r\n                \"nvme0n1-part1\",\r\n                \"nvme1n1-part1\"\r\n            ],\r\n            \"fileSystem\": \"Ext4\",\r\n            \"mountPoint\": \"/\"\r\n        }\r\n    ]",
            "nullable": true
          },
          "ipxeUrl": {
            "type": "string",
            "description": "If doing an iPXE boot, this is the URL to the script.",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "description": "Template can be specified instead of image, partitions, sshKeyId, and userData.",
            "format": "int64",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The number of services to be created.  By default, one will be created.",
            "format": "int32",
            "nullable": true
          },
          "reservePricing": {
            "type": "boolean",
            "description": "Denotes if the metal service is being reserved for a whole year. If so, it gets the discounted rate"
          },
          "sshKeyId": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true,
            "deprecated": true
          },
          "tierObj": {
            "$ref": "#/components/schemas/MetalTier"
          }
        },
        "additionalProperties": false,
        "description": "Request details for creating a metal service."
      },
      "CreateNetworkRequest": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "description": "The id of the region that this network will be set up in",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "*Optional* - The display name of the network",
            "nullable": true
          },
          "v4Subnet": {
            "type": "string",
            "description": "The IPv4 network address. For example: 10.99.0.0",
            "nullable": true
          },
          "v4SubnetMask": {
            "type": "string",
            "description": "The number of bits for the netmask in CIDR notation. For example: 24",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about the network to be created"
      },
      "CreateNetworkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/CreateNetworkResponseDetails"
          }
        },
        "additionalProperties": false,
        "description": "Details about the newly created network"
      },
      "CreateNetworkResponseDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id for the network",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "description": "The region id for the network",
            "nullable": true
          },
          "dateCreated": {
            "type": "string",
            "description": "The timestamp for when the network was created",
            "format": "date-time"
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the network",
            "nullable": true
          },
          "v4Subnet": {
            "type": "string",
            "description": "The IPv4 network address. For example: 10.99.0.0",
            "nullable": true
          },
          "v4SubnetMask": {
            "type": "string",
            "description": "The number of bits for the netmask in CIDR notation. For example: 24",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about the newly created network"
      },
      "CreateVolumeRequest": {
        "required": [
          "regionId",
          "size"
        ],
        "type": "object",
        "properties": {
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The data center region where the storage volume will be created"
          },
          "size": {
            "type": "integer",
            "description": "The size of the volume, in gibibytes (GiB).",
            "format": "int32"
          },
          "volumeType": {
            "type": "string",
            "description": "Decide whether you want an HDD or an NVME SSD",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "*Optional* - The name of the storage volume",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "*Optional* - The volume description.",
            "nullable": true
          },
          "imageName": {
            "type": "string",
            "description": "*Optional* - The name of the image from which you want to create the volume.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Request to create a storage volume"
      },
      "CreateVolumeResponse": {
        "type": "object",
        "properties": {
          "volumeId": {
            "type": "string",
            "description": "The id of the storage volume",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "The time the volume was last updated",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "The time the volume was created",
            "format": "date-time"
          },
          "size": {
            "type": "string",
            "description": "The size of the volume",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The current status of the volume",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "The description of the volume",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the volume",
            "nullable": true
          },
          "volumeType": {
            "type": "string",
            "description": "The type of the volume. This should be \"SSD\" or \"HDD\"",
            "nullable": true
          },
          "region": {
            "type": "string",
            "description": "The region in which the volume was created",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to the request to create a storage volume"
      },
      "CreateVolumeResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/CreateVolumeResponse"
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "DeleteVolumeRequest": {
        "required": [
          "regionId",
          "volumeId"
        ],
        "type": "object",
        "properties": {
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region that the volume is in"
          },
          "volumeId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the volume to be deleted"
          }
        },
        "additionalProperties": false,
        "description": "Details needed to delete a volume"
      },
      "DetachFromNetworkRequest": {
        "type": "object",
        "properties": {
          "networkId": {
            "type": "string",
            "description": "The ID of the network to detach from",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details for detaching an instance from a network"
      },
      "DetachFromNetworkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response when detaching a network from an instance"
      },
      "DetachVolumeRequest": {
        "required": [
          "regionId",
          "volumeId"
        ],
        "type": "object",
        "properties": {
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region of both the volume and the instance"
          },
          "volumeId": {
            "minLength": 1,
            "type": "string",
            "description": "The ID of the volume to detach"
          }
        },
        "additionalProperties": false,
        "description": "Request to detach a volume from an instance"
      },
      "DetachVolumeResponse": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "description": "The region of both the volume and the instance",
            "nullable": true
          },
          "volumeId": {
            "type": "string",
            "description": "The id of the volume to detach",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to detaching a volume from an instance"
      },
      "DetachVolumeResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/DetachVolumeResponse"
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "Details": {
        "type": "object",
        "properties": {
          "networkId": {
            "type": "string",
            "description": "The ID of the network",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "description": "The ID of the region the network is in",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Human readable description of the network",
            "nullable": true
          },
          "v4Subnet": {
            "type": "string",
            "description": "The IPV4 subnet of the network",
            "nullable": true
          },
          "v4SubnetMask": {
            "type": "string",
            "description": "The IPV4 subnet mask of the network",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about the instance networks"
      },
      "DeviceVendor": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "DriveDetails": {
        "type": "object",
        "properties": {
          "deviceName": {
            "type": "string",
            "nullable": true
          },
          "serial": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DrivePriceResponse": {
        "type": "object",
        "properties": {
          "slot": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for the drive option",
            "format": "double",
            "example": 5
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the drive option",
            "format": "double",
            "example": 0.05
          }
        },
        "additionalProperties": false,
        "description": "Details about the price of a drive option"
      },
      "DriveSlot": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id of the drive slot. This would be in the format of ```nvme0n1```\r\nor ```nvme0n2```",
            "nullable": true
          },
          "default": {
            "type": "string",
            "description": "Denotes the default value of the drive in this drive slot for the tier.",
            "nullable": true
          },
          "required": {
            "type": "boolean",
            "description": "Whether or not a drive is required in this slot."
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetalStorageDevice"
            },
            "description": "Describes the available drives that can be installed in the drive slot.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a single drive slot and all the drives that can be installed\r\nin it."
      },
      "EventState": {
        "enum": [
          0,
          1,
          2
        ],
        "type": "integer",
        "description": "Represents the state of an event.",
        "format": "int32"
      },
      "ExtendVolumeRequest": {
        "required": [
          "newSize",
          "regionId",
          "volumeId"
        ],
        "type": "object",
        "properties": {
          "newSize": {
            "type": "integer",
            "description": "The new size for the volume, in gibibytes (GiB)",
            "format": "int32"
          },
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region in which the volume is located"
          },
          "volumeId": {
            "minLength": 1,
            "type": "string",
            "description": "The id of the volume to be extended"
          }
        },
        "additionalProperties": false,
        "description": "Details needed to extend a volume"
      },
      "ExtendVolumeResponse": {
        "type": "object",
        "properties": {
          "regionId": {
            "type": "string",
            "description": "The id of the volume to extend",
            "nullable": true
          },
          "newSize": {
            "type": "integer",
            "description": "The new size for the volume, in gibibytes (GiB)",
            "format": "int32"
          },
          "volumeId": {
            "type": "string",
            "description": "The id of the volume to be extended",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to extending a volume"
      },
      "ExtendVolumeResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/ExtendVolumeResponse"
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "FileSystem": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11
        ],
        "type": "integer",
        "description": "The supported filesystems for metal services",
        "format": "int32"
      },
      "GetInvoiceResponse": {
        "type": "object",
        "properties": {
          "result": {
            "$ref": "#/components/schemas/GetInvoiceResponseDetails"
          },
          "success": {
            "type": "boolean",
            "description": "Flag indicating if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true,
            "example": "Invoice found"
          }
        },
        "additionalProperties": false
      },
      "GetInvoiceResponseDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the invoice",
            "format": "int64",
            "example": 123456
          },
          "total": {
            "type": "number",
            "description": "The total amount of the invoice",
            "format": "double",
            "example": 150
          },
          "accountId": {
            "type": "integer",
            "description": "The account id the invoice applies to",
            "format": "int64",
            "example": 67890
          },
          "status": {
            "type": "string",
            "description": "The status of the invoice. One of: Draft, Sent, Paid, Void",
            "nullable": true,
            "example": "Paid"
          },
          "dueDate": {
            "type": "string",
            "description": "The due date for the invoice",
            "format": "date-time",
            "nullable": true
          },
          "lines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceLineResponse"
            },
            "description": "The individual line items of the invoice",
            "nullable": true
          },
          "invoiceDate": {
            "type": "string",
            "description": "The date that the invoice was created",
            "format": "date-time",
            "nullable": true
          },
          "datePaid": {
            "type": "string",
            "description": "The date that the invoice was paid",
            "format": "date-time",
            "nullable": true
          },
          "payBefore": {
            "type": "string",
            "description": "The date to pay the invoice before",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "description": "Details about the invoice"
      },
      "GetNetworkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/GetNetworkResponseDetails"
          }
        },
        "additionalProperties": false,
        "description": "Details about a single network"
      },
      "GetNetworkResponseDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique id for the network",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "description": "The id of the region the network is in",
            "nullable": true
          },
          "dateTimeCreated": {
            "type": "string",
            "description": "The timestamp for when the network was created",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the network",
            "nullable": true
          },
          "v4Subnet": {
            "type": "string",
            "description": "The IPv4 network address. For example: 10.99.0.0",
            "nullable": true
          },
          "v4SubnetMask": {
            "type": "string",
            "description": "The number of bits for the netmask in CIDR notation. For example: 24",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Object containing details about the network"
      },
      "Image": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The id for the OS image",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "Human-readable name for the OS image",
            "nullable": true
          },
          "operatingSystemName": {
            "type": "string",
            "description": "Base name for the Operating System. Like ```Ubuntu``` or\r\n```Windows Server```",
            "nullable": true
          },
          "operatingSystemVersion": {
            "type": "string",
            "description": "Specific version of the Operating System. Like ```18.04 LTS``` for\r\nUbuntu or ```2019 Standard``` for Windows",
            "nullable": true
          },
          "disableCustomizableStorage": {
            "type": "boolean",
            "description": "Reduces customization options for storage. Necessary for Windows\r\nand iPXE installs."
          },
          "metalIdentifier": {
            "type": "string",
            "nullable": true
          },
          "metalCloudInit": {
            "type": "string",
            "nullable": true
          },
          "metalUefiCloudInit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about the OS image applied to a service"
      },
      "ImageIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Image"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "Interface": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "linkSpeed": {
            "type": "integer",
            "format": "int32"
          },
          "macAddress": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "InternalErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Details about the error that occurred",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response that indicates an internal error occurred"
      },
      "InvoiceLineResponse": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the service being billed for",
            "nullable": true,
            "example": "Bare Metal - test-os - SVC-4419"
          },
          "metadata": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Metadata about the service provided. This could be anything, but it would be additional information worth\r\ncalling out about the service, like region, memory, or hard disks.",
            "nullable": true,
            "example": {
              "Memory": "512 GB"
            }
          },
          "amount": {
            "type": "number",
            "description": "The amount of usage calculated for the service",
            "format": "double",
            "example": 400
          },
          "total": {
            "type": "number",
            "description": "The total cost of the line item. This is the amount multiplied by the unit price.",
            "format": "double",
            "example": 78.36
          },
          "unitPrice": {
            "type": "number",
            "description": "The rate a which the service is billed at.",
            "format": "double",
            "example": 0.2
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the service",
            "nullable": true,
            "example": "test-os"
          },
          "regionId": {
            "type": "string",
            "description": "The region the service is in",
            "nullable": true,
            "example": "PIT1"
          },
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "tier": {
            "type": "string",
            "description": "The service tier. In the case of metal this would processor of the system.",
            "nullable": true,
            "example": "2388g"
          },
          "serviceId": {
            "type": "integer",
            "description": "The id of the service associated with the invoice line",
            "format": "int64",
            "example": 4419
          }
        },
        "additionalProperties": false,
        "description": "Individual line item on the invoice"
      },
      "InvoiceNotFound": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Flag indicating if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true,
            "example": "Invoice not found"
          }
        },
        "additionalProperties": false
      },
      "InvoiceResponseRow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the invoice",
            "format": "int64",
            "example": 123345
          },
          "total": {
            "type": "number",
            "description": "The total amount of the invoice",
            "format": "double",
            "example": 150
          },
          "accountId": {
            "type": "integer",
            "description": "The account id the invoice applies to",
            "format": "int64",
            "example": 56789
          },
          "status": {
            "type": "string",
            "description": "The status of the invoice. One of: Draft, Sent, Paid, Void",
            "nullable": true,
            "example": "Paid"
          },
          "dueDate": {
            "type": "string",
            "description": "The due date for the invoice in UTC time.",
            "format": "date-time",
            "nullable": true
          },
          "datePaid": {
            "type": "string",
            "description": "The date that the invoice was created in UTC time.",
            "format": "date-time",
            "nullable": true
          },
          "payBefore": {
            "type": "string",
            "description": "The date to pay the invoice before in UTC time.",
            "format": "date-time"
          },
          "invoiceDate": {
            "type": "string",
            "description": "The date that the invoice was paid in UTC time.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ListInstanceNetworksResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Details"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response to the list instance networks endpoint"
      },
      "ListInvoicesResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Flag indicating if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true,
            "example": "Request successfully"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvoiceResponseRow"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          }
        },
        "additionalProperties": false
      },
      "ListMetadata": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "description": "Total number of records in the collection",
            "format": "int32",
            "example": 1000
          },
          "limit": {
            "type": "integer",
            "description": "The max number of records to return in the response",
            "format": "int32",
            "example": 100
          },
          "skip": {
            "type": "integer",
            "description": "The number of records which were skipped as requested",
            "format": "int64",
            "example": 0
          }
        },
        "additionalProperties": false,
        "description": "For paginated responses, this object contains metadata about the list of items."
      },
      "ListUsageResponse": {
        "type": "object",
        "properties": {
          "usages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UsageResponseRow"
            },
            "description": "The usages for the services",
            "nullable": true
          },
          "total": {
            "type": "number",
            "description": "The total cost of the usage for the month",
            "format": "double"
          },
          "month": {
            "$ref": "#/components/schemas/Month"
          },
          "year": {
            "type": "integer",
            "description": "The year for the usage",
            "format": "int32"
          }
        },
        "additionalProperties": false,
        "description": "Usage details for a specific year and month"
      },
      "ListUsageResponsePagedTswApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Flag indicating if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true,
            "example": "Request successfully"
          },
          "result": {
            "$ref": "#/components/schemas/ListUsageResponse"
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          }
        },
        "additionalProperties": false,
        "description": "Paged response to an API request"
      },
      "ListVolumesResponseRecord": {
        "type": "object",
        "properties": {
          "volumeId": {
            "type": "string",
            "description": "The UUID of the volume",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "description": "The name of the volume",
            "nullable": true
          },
          "region": {
            "type": "string",
            "description": "The region where the volume is located",
            "nullable": true
          },
          "size": {
            "type": "integer",
            "description": "The size of the volume",
            "format": "int32"
          },
          "description": {
            "type": "string",
            "description": "The description of the volume",
            "nullable": true
          },
          "volumeType": {
            "type": "string",
            "description": "The type of the volume hdd or nvme",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "description": "The time the volume was created",
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "description": "The time the volume was last updated",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "The current status of the volume",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeAttachment"
            },
            "description": "The attachments for the volume",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A single record of a volume from a request to list all volumes"
      },
      "ListVolumesResponseRecordIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListVolumesResponseRecord"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "LogMessage": {
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LogMessageIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LogMessage"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "MemoryModule": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "manufacturer": {
            "type": "string",
            "nullable": true
          },
          "memoryType": {
            "type": "string",
            "nullable": true
          },
          "capacityGb": {
            "type": "integer",
            "format": "int32"
          },
          "operatingSpeedMhz": {
            "type": "integer",
            "format": "int32"
          },
          "partNumber": {
            "type": "string",
            "nullable": true
          },
          "serialNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MemoryOption": {
        "type": "object",
        "properties": {
          "gb": {
            "type": "integer",
            "description": "The amount of memory in Gigabytes.",
            "format": "int32"
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for a memory option.",
            "format": "double"
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the memory option.",
            "format": "double"
          },
          "default": {
            "type": "boolean",
            "description": "If this is the default memory option for the tier, this will be true.\r\nFalse otherwise"
          }
        },
        "additionalProperties": false,
        "description": "A memory option which is available on a tier."
      },
      "MemoryPriceResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for the memory option",
            "format": "double",
            "example": 5
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the memory option",
            "format": "double",
            "example": 0.05
          }
        },
        "additionalProperties": false,
        "description": "Details about the price of a memory option"
      },
      "MetalConfiguration": {
        "type": "object",
        "properties": {
          "disks": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "nullable": true
          },
          "memoryGb": {
            "type": "integer",
            "format": "int32"
          },
          "tier": {
            "$ref": "#/components/schemas/MetalTier"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "MetalConfigurationIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetalConfiguration"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "MetalDevice": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "nullable": true
          },
          "rackId": {
            "type": "integer",
            "format": "int32"
          },
          "rackName": {
            "type": "string",
            "nullable": true
          },
          "rackFacilityId": {
            "type": "string",
            "nullable": true
          },
          "rackPosition": {
            "type": "number",
            "format": "double"
          },
          "uHeight": {
            "type": "integer",
            "format": "int32"
          },
          "deviceBay": {
            "type": "string",
            "nullable": true
          },
          "deviceVendor": {
            "$ref": "#/components/schemas/DeviceVendor"
          },
          "deviceType": {
            "type": "string",
            "nullable": true
          },
          "serial": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "powerStatus": {
            "type": "string",
            "nullable": true
          },
          "powerTheoreticalWatts": {
            "type": "integer",
            "format": "int32"
          },
          "cpuModel": {
            "type": "string",
            "nullable": true
          },
          "memoryGb": {
            "type": "integer",
            "format": "int32"
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "storageSummary": {
            "type": "string",
            "nullable": true
          },
          "bmcIp": {
            "type": "string",
            "nullable": true
          },
          "memoryModules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryModule"
            },
            "nullable": true
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetalDevice"
            },
            "nullable": true
          },
          "service": {
            "$ref": "#/components/schemas/MetalService"
          }
        },
        "additionalProperties": false
      },
      "MetalService": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "parentServiceId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "serviceType": {
            "$ref": "#/components/schemas/ServiceType"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "regionId": {
            "type": "string",
            "nullable": true
          },
          "tierId": {
            "type": "string",
            "nullable": true
          },
          "externalIdentifier": {
            "type": "string",
            "nullable": true
          },
          "billingId": {
            "type": "string",
            "nullable": true
          },
          "contractId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "rateId": {
            "type": "string",
            "description": "UID for the cost rate for this service as it's stored in the billing system",
            "format": "uuid",
            "nullable": true
          },
          "region": {
            "$ref": "#/components/schemas/Region"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          },
          "metalDevice": {
            "$ref": "#/components/schemas/MetalDevice"
          },
          "sku": {
            "type": "string",
            "nullable": true,
            "readOnly": true
          },
          "reservePricing": {
            "type": "boolean",
            "nullable": true
          },
          "objectType": {
            "type": "string",
            "description": "The object type of the service. Metal services are of type \"MTL\".",
            "nullable": true,
            "readOnly": true
          },
          "powerState": {
            "$ref": "#/components/schemas/PowerState"
          },
          "currentTask": {
            "type": "string",
            "description": "The current task being performed on the service.",
            "nullable": true
          },
          "imageId": {
            "type": "string",
            "description": "The ID of the OS image applied to the metal service",
            "nullable": true
          },
          "ipAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The ip addresses associated with the metal service",
            "nullable": true
          },
          "ipv4DefaultGateway": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "ipv6DefaultGateway": {
            "type": "string",
            "description": "",
            "nullable": true
          },
          "interfaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Interface"
            },
            "description": "",
            "nullable": true
          },
          "memoryGb": {
            "type": "integer",
            "description": "The amount of memory on the metal service in GB",
            "format": "int32"
          },
          "storageDevices": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MetalStorageDevice"
            },
            "description": "",
            "nullable": true
          },
          "provisioningEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProvisioningEvent"
            },
            "description": "",
            "nullable": true
          },
          "tier": {
            "$ref": "#/components/schemas/MetalTier"
          },
          "image": {
            "$ref": "#/components/schemas/Image"
          },
          "activeDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "terminationDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The current monthly price for the service",
            "format": "double",
            "nullable": true
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The current hourly price for the service",
            "format": "double"
          }
        },
        "additionalProperties": false,
        "description": "Represents a metal service."
      },
      "MetalServiceApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/MetalService"
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "MetalServiceIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetalService"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "MetalStorageDevice": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The *name* of the drive is a moniker that refers to the drives size. For\r\nexample this could be ```1.92t``` or ```960g```",
            "nullable": true
          },
          "default": {
            "type": "boolean",
            "description": "True if this is the default drive for the tier"
          },
          "type": {
            "$ref": "#/components/schemas/StorageType"
          },
          "capacityGb": {
            "type": "integer",
            "description": "The capacity of the drive in Gigabytes",
            "format": "int32"
          },
          "details": {
            "$ref": "#/components/schemas/DriveDetails"
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for the specific drive",
            "format": "double"
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the specific drive configuration",
            "format": "double"
          },
          "isBossDrive": {
            "type": "boolean",
            "description": "True if this drive is a boss drive"
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a drive which can be installed in a drive slot."
      },
      "MetalTemplate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "objectType": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "displayName": {
            "type": "string",
            "nullable": true
          },
          "createModel": {
            "$ref": "#/components/schemas/CreateMetalRequest"
          },
          "cloudInit": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "MetalTemplateIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetalTemplate"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "MetalTier": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "externalIdentifier": {
            "type": "string",
            "nullable": true
          },
          "availability": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceAvailability"
            },
            "nullable": true
          },
          "cpu": {
            "type": "string",
            "description": "The CPU model for the tier",
            "nullable": true
          },
          "cpuDescription": {
            "type": "string",
            "description": "The description of the CPU in terms of cores and threads. For example,\r\n4c / 8t will denote a cpu with 4 cores and 8 threads.",
            "nullable": true
          },
          "memoryOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MemoryOption"
            },
            "description": "Describes the memory options available for the tier.",
            "nullable": true
          },
          "driveSlots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DriveSlot"
            },
            "description": "Describes the available drive slots and drives which can be placed in a\r\nmetal configuration.",
            "nullable": true
          },
          "networkOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkOption"
            },
            "description": "The available network options for the tier. A network option defines\r\nthe speed of the network as well as the associated price.",
            "nullable": true
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for the tier",
            "format": "double"
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the tier",
            "format": "double"
          },
          "hidden": {
            "type": "boolean"
          },
          "memoryOptionSetId": {
            "type": "integer",
            "format": "int32"
          },
          "driveSlotSetId": {
            "type": "integer",
            "format": "int32"
          },
          "networkOptionSetId": {
            "type": "integer",
            "format": "int32"
          },
          "tierType": {
            "$ref": "#/components/schemas/MetalTierType"
          }
        },
        "additionalProperties": false,
        "description": "A metal tier represents the configuration options that have billable\r\nimplications for a metal service. This includes the CPU, memory, drive,\r\nand network options."
      },
      "MetalTierIEnumerableApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetalTier"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Standard response object for all API requests with additional data"
      },
      "MetalTierType": {
        "enum": [
          0,
          1
        ],
        "type": "integer",
        "format": "int32"
      },
      "Month": {
        "enum": [
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12
        ],
        "type": "integer",
        "format": "int32"
      },
      "NetworkOption": {
        "type": "object",
        "properties": {
          "speedGbps": {
            "type": "integer",
            "description": "The speed of the network in Gbps",
            "format": "int32"
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for the network option",
            "format": "double"
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the network option",
            "format": "double"
          },
          "default": {
            "type": "boolean",
            "description": "True if this is the default option for the tier"
          },
          "isBonded": {
            "type": "boolean",
            "description": "True if this network option is bonded"
          }
        },
        "additionalProperties": false,
        "description": "The available network options for the tier. A network option defines\r\nthe speed of the network as well as the associated price."
      },
      "NetworkPriceResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "unit": {
            "type": "string",
            "nullable": true
          },
          "monthlyPrice": {
            "type": "number",
            "description": "The monthly price for the network configuration",
            "format": "double",
            "example": 5
          },
          "hourlyPrice": {
            "type": "number",
            "description": "The hourly price for the network configuration",
            "format": "double",
            "example": 0.05
          }
        },
        "additionalProperties": false,
        "description": "Details about the price of a network configuration"
      },
      "NotFoundErrorResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "message": {
            "type": "string",
            "description": "Details about the resource that wasn't found",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Response that indicates the requested resource was not found"
      },
      "Partition": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the partition.",
            "nullable": true,
            "example": "nvme0n1-part1"
          },
          "device": {
            "type": "string",
            "description": "The device name of the partition.",
            "nullable": true,
            "example": "nvme0n1"
          },
          "sizeBytes": {
            "type": "integer",
            "description": "The size of the partition in bytes.  If not specified, the remainder of the space will be used.",
            "format": "int64",
            "nullable": true,
            "example": 50000000000
          },
          "fileSystem": {
            "$ref": "#/components/schemas/FileSystem"
          },
          "mountPoint": {
            "type": "string",
            "description": "The mount point for the partition.",
            "nullable": true,
            "example": "/"
          }
        },
        "additionalProperties": false,
        "description": "Describes a partition on a storage device"
      },
      "PowerCommand": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "format": "int32"
      },
      "PowerState": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Represents the power state of a service.",
        "format": "int32"
      },
      "ProvisioningEvent": {
        "type": "object",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Gets or sets the priority of the event.",
            "format": "int32"
          },
          "body": {
            "type": "string",
            "description": "Gets or sets the body or description of the event.",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "description": "Gets or sets the timestamp when the event was created or updated.",
            "format": "date-time"
          },
          "state": {
            "$ref": "#/components/schemas/EventState"
          }
        },
        "additionalProperties": false,
        "description": "Represents a provisioning event in the system."
      },
      "RaidArray": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the RAID array.",
            "nullable": true,
            "example": "md0"
          },
          "type": {
            "$ref": "#/components/schemas/RaidType"
          },
          "members": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The members of the RAID array.\r\n            \r\nFor example:\r\n            \r\n    \"members\": [\r\n        \"sda-part1\",\r\n        \"sdb-part1\"\r\n    ],",
            "nullable": true
          },
          "partitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Partition"
            },
            "description": "Partitions can be created on raid arrays if the following options are not set: ```SizeBytes```,\r\n```FileSystem```, and ```MountPoint``",
            "nullable": true
          },
          "sizeBytes": {
            "type": "integer",
            "description": "The size of the RAID array in bytes. **Must be set if partition is not set**",
            "format": "int64",
            "nullable": true,
            "example": 50000000000
          },
          "fileSystem": {
            "$ref": "#/components/schemas/FileSystem"
          },
          "mountPoint": {
            "type": "string",
            "description": "The mount point for the RAID array. **Must be set if partition is not set**",
            "nullable": true,
            "example": "/"
          }
        },
        "additionalProperties": false,
        "description": "Describes a RAID array on a metal service."
      },
      "RaidType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "The type of RAID array",
        "format": "int32"
      },
      "Region": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "country": {
            "type": "string",
            "nullable": true
          },
          "city": {
            "type": "string",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "serviceTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ServiceType"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReinstallMetalRequest": {
        "required": [
          "regionId",
          "tierId"
        ],
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "Display name for the service.",
            "nullable": true
          },
          "regionId": {
            "minLength": 1,
            "type": "string",
            "description": "The region this service should be created in (for example: PIT1).  If an invalid region is provided you will receive a 400 Bad Request.  Use the Regions endpoint to retrieve available regions."
          },
          "tierId": {
            "minLength": 1,
            "type": "string",
            "description": "The service tier to be created.  For metal, this is typically the server config.  For example: 7302p would create a Epyc 7302P system.  Tier availability can be retrieved using the regions endpoints."
          },
          "projectId": {
            "type": "integer",
            "format": "int64"
          },
          "imageId": {
            "type": "string",
            "description": "The image to use when creating this service.  Available images can be retrieved via the images endpoint.",
            "nullable": true
          },
          "sshKeyIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "The SSH key ids to be added to the service.  These keys will be added to the authorized_keys file for the root user.",
            "nullable": true
          },
          "password": {
            "type": "string",
            "description": "The password to be set for the root user.  If not provided, a random password will be generated.",
            "nullable": true
          },
          "userData": {
            "type": "string",
            "description": "Additional user data",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sshKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SshKey"
            },
            "nullable": true
          },
          "memoryGb": {
            "type": "integer",
            "description": "The amount of memory in GB to be allocated to the service.",
            "format": "int32"
          },
          "disks": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "nullable": true
            },
            "description": "Dictionary of disk names and sizes in GB. If not specified, the default configuration for the metal tier will\r\nbe used.\r\n            \r\nThe key is the disk name and the value is the size in GB.  For example:\r\n\r\n    \"disks\": {\r\n        \"nvme0n1\": \"960g\",\r\n        \"nvme1n1\": \"960g\"\r\n    }",
            "nullable": true
          },
          "partitions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Partition"
            },
            "description": "Partitions to be created.  Not specifying this will result in a single root partition being created.\r\n            \r\nExample for specifying partitions:\r\n\r\n    \"partitions\": [\r\n        {\r\n            \"name\": \"nvme0n1-part1\",\r\n            \"device\": \"nvme0n1\",\r\n            \"sizeBytes\": 50000000000\r\n        },\r\n        {\r\n            \"name\": \"nvme0n1-part1\",\r\n            \"device\": \"nvme0n1\",\r\n            \"sizeBytes\": 50000000000\r\n        },\r\n        {\r\n            \"name\": \"nvme1n1-part2\",\r\n            \"device\": \"nvme1n1\"\r\n            // If sizeBytes is not specified for a device, the remainder of the space will be used.\r\n        }\r\n    ]",
            "nullable": true
          },
          "raidArrays": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RaidArray"
            },
            "description": "Raid arrays to be created. Can reference physical device names or partitions from mediums of the same class.\r\n            \r\nExample of specifying raid arrays:\r\n            \r\n    \"raidArrays\": [\r\n        {\r\n            \"name\": \"md0\",\r\n            \"type\": \"Raid1\",\r\n            \"members\": [\r\n                \"nvme0n1-part1\",\r\n                \"nvme1n1-part1\"\r\n            ],\r\n            \"fileSystem\": \"Ext4\",\r\n            \"mountPoint\": \"/\"\r\n        }\r\n    ]",
            "nullable": true
          },
          "ipxeUrl": {
            "type": "string",
            "description": "If doing an iPXE boot, this is the URL to the script.",
            "nullable": true
          },
          "templateId": {
            "type": "integer",
            "description": "Template can be specified instead of image, partitions, sshKeyId, and userData.",
            "format": "int64",
            "nullable": true
          },
          "quantity": {
            "type": "integer",
            "description": "The number of services to be created.  By default, one will be created.",
            "format": "int32",
            "nullable": true
          },
          "reservePricing": {
            "type": "boolean",
            "description": "Denotes if the metal service is being reserved for a whole year. If so, it gets the discounted rate"
          },
          "sshKeyId": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true,
            "deprecated": true
          },
          "tierObj": {
            "$ref": "#/components/schemas/MetalTier"
          },
          "serviceId": {
            "type": "integer",
            "format": "int64"
          },
          "service": {
            "$ref": "#/components/schemas/MetalService"
          }
        },
        "additionalProperties": false
      },
      "SearchResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchResponseRecord"
            },
            "description": "Additional data returned by the API",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Result of a search request"
      },
      "SearchResponseRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID of the service",
            "format": "int64"
          },
          "displayName": {
            "type": "string",
            "description": "The hostname of the instance",
            "nullable": true
          },
          "serviceType": {
            "type": "string",
            "description": "Text of the service type Metal, Instance, etc...",
            "nullable": true
          },
          "regionId": {
            "type": "string",
            "description": "The region the service is in",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Text of the current status of the host",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Single record of a service for the search response"
      },
      "ServiceAvailability": {
        "type": "object",
        "properties": {
          "maxQuantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceRenameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The new name for the service",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Describes a request to rename a service."
      },
      "ServiceType": {
        "enum": [
          0,
          1,
          2,
          3,
          4,
          5,
          6
        ],
        "type": "integer",
        "format": "int32"
      },
      "SshKey": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "deleted": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "objectType": {
            "type": "string",
            "description": "The type of object",
            "nullable": true,
            "readOnly": true,
            "example": "KEY"
          },
          "projectId": {
            "type": "integer",
            "description": "The project ID",
            "format": "int64",
            "example": 123
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the SSH key",
            "nullable": true,
            "example": "My SSH Key"
          },
          "key": {
            "type": "string",
            "description": "The SSH key",
            "nullable": true,
            "example": "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD..."
          }
        },
        "additionalProperties": false,
        "description": "Represents an SSH key"
      },
      "Status": {
        "enum": [
          0,
          1,
          2,
          3,
          4
        ],
        "type": "integer",
        "description": "Describes the status of a service",
        "format": "int32"
      },
      "StorageType": {
        "enum": [
          0,
          1,
          2,
          3
        ],
        "type": "integer",
        "description": "Describes the storage type of the drive. This could be HDD, SSD, or NVME.",
        "format": "int32"
      },
      "UpdateNetworkRequest": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the network",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about what to be updated about the network"
      },
      "UpdateNetworkResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "True if the request succeeded, false otherwise"
          },
          "message": {
            "type": "string",
            "description": "Provides additional detail about the response if one is required",
            "nullable": true
          },
          "validationErrors": {
            "type": "array",
            "items": { },
            "nullable": true
          },
          "metadata": {
            "$ref": "#/components/schemas/ListMetadata"
          },
          "result": {
            "$ref": "#/components/schemas/UpdateNetworkResponseDetails"
          }
        },
        "additionalProperties": false,
        "description": "Response to the update network endpoint"
      },
      "UpdateNetworkResponseDetails": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string",
            "description": "The display name of the network",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Details about the update to the network"
      },
      "UsageResponseRow": {
        "type": "object",
        "properties": {
          "serviceId": {
            "type": "integer",
            "description": "Id for the service",
            "format": "int64",
            "example": 12345
          },
          "year": {
            "type": "integer",
            "description": "Year of the usage",
            "format": "int32",
            "example": 2022
          },
          "month": {
            "$ref": "#/components/schemas/Month"
          },
          "amount": {
            "type": "number",
            "description": "The amount of usage that occurred during the month. Units are based on the service type.\r\nFor instance, for bare metal servers, this is the number of hours the service was\r\n```active```.",
            "format": "double",
            "example": 100
          },
          "rate": {
            "type": "number",
            "description": "The rate is the cost per unit of usage. For instance, for bare metal servers, this is the\r\nhourly rate",
            "format": "double",
            "example": 0.5
          },
          "total": {
            "type": "number",
            "description": "Total is the total cost of the usage for the month. This is calculated by multiplying the \r\namount of usage by the rate.",
            "format": "double",
            "example": 50
          },
          "displayName": {
            "type": "string",
            "description": "The display name of the service as presented on the portal",
            "nullable": true,
            "example": "TestService"
          },
          "regionId": {
            "type": "string",
            "description": "The region that the service is located in (if applicable)",
            "nullable": true,
            "example": "PIT1"
          }
        },
        "additionalProperties": false,
        "description": "Usage for a service for a specific year and month."
      },
      "UsageResponseRowTswApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Flag indicating if the request was successful"
          },
          "message": {
            "type": "string",
            "description": "Additional information about the response",
            "nullable": true,
            "example": "Request successfully"
          },
          "result": {
            "$ref": "#/components/schemas/UsageResponseRow"
          }
        },
        "additionalProperties": false,
        "description": "Response to API Request"
      },
      "VolumeAttachment": {
        "type": "object",
        "properties": {
          "openstackServerId": {
            "type": "string",
            "description": "The id of the server the volume is attached to in Openstack",
            "nullable": true
          },
          "serverId": {
            "type": "integer",
            "description": "The TSW id of the server the volume is attached to",
            "format": "int64"
          },
          "attachmentId": {
            "type": "string",
            "description": "The id for the specific attachment of the volume to the server",
            "nullable": true
          },
          "attachedAt": {
            "type": "string",
            "description": "The time the volume was attached to the server",
            "nullable": true
          },
          "volumeId": {
            "type": "string",
            "description": "The id of the volume in the attachment",
            "nullable": true
          },
          "device": {
            "type": "string",
            "description": "The path of the device on the instance",
            "nullable": true
          },
          "id": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Contains details about the attachment of a volume to a server"
      }
    }
  },
  "tags": [
    {
      "name": "Cloud Compute",
      "description": "In the language of cloud computing, virtual machines are called instances."
    },
    {
      "name": "SshKey",
      "description": "SSH Keys provide a secure way to access your servers. You can create, list and delete\r\nSSH keys using the API."
    },
    {
      "name": "Usage",
      "description": "Provides endpoints for viewing usage data for the current month/year or for previous month/years. Usage data is\r\nusage to calculate billing for the current month."
    },
    {
      "name": "Volume",
      "description": "Volumes are block storage devices that can be attached to instances."
    }
  ]
}